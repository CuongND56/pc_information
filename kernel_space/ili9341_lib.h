#ifndef __ILI9341_LIB_H_
#define __ILI9341_LIB_H_

#include "ili9341_commands.h"
#include "spi_common/spi_common.h"

#define ILI9341_HEIGHT              320
#define ILI9341_WIDTH               240
#define ILI9341_BYTES_PER_PIXEL     3
#define ILI9341_BITS_PER_PIXEL      (8 * ILI9341_BYTES_PER_PIXEL)
#define ILI9341_COLOR_LENGTH        6
#define ILI9341_BUFFER_SIZE         (ILI9341_HEIGHT * ILI9341_WIDTH * ILI9341_BYTES_PER_PIXEL)
#define ILI9341_LINE_LENGTH         (ILI9341_WIDTH * ILI9341_BYTES_PER_PIXEL)

#define ILI9341_RED_OFFSET          18
#define ILI9341_GREEN_OFFSET        10
#define ILI9341_BLUE_OFFSET         2

#define ILI9341_CASET		        0x2A

#define ILI9341_DC_DATA             1
#define ILI9341_DC_COMMAND          0

#define ILI9341_BLACK		0x0000
#define ILI9341_NAVY		0x000F
#define ILI9341_DARKGREEN	0x03E0
#define ILI9341_DARKCYAN	0x03EF
#define ILI9341_MAROON		0x7800
#define ILI9341_PURPLE		0x780F
#define ILI9341_OLIVE		0x7BE0
#define ILI9341_LIGHTGREY	0xC618
#define ILI9341_DARKGREY	0x7BEF
#define ILI9341_BLUE		0x001F
#define ILI9341_GREEN		0x07E0
#define ILI9341_CYAN		0x07FF
#define ILI9341_RED		0xF800
#define ILI9341_MAGENTA		0xF81F
#define ILI9341_YELLOW		0xFFE0
#define ILI9341_WHITE		0xFFFF
#define ILI9341_ORANGE		0xFD20
#define ILI9341_GREENYELLOW	0xAFE5
#define ILI9341_PINK		0xF81F

#define LOW                 0
#define HIGH                1

struct ili9341_device {
    struct spi_device *client;
    struct gpio_desc *dc_gpio;
    struct gpio_desc *rs_gpio;
    struct gpio_desc *cs_gpio;
    u8 *display_buff;
};

struct ili9341_cmd_list_data {
	u8 cmd;
	u8 length_data;
	u8 data[20];
};

int ili9341_init(struct ili9341_device *dev_data);
int ili9341_send_display_buff(struct ili9341_device *dev_data);
int ili9341_display_on(struct ili9341_device *dev_data);
int ili9341_software_reset(struct ili9341_device *dev_data);
int ili9341_send_command(struct ili9341_device *dev_data, u8 *buff, size_t len);
int ili9341_send_command_with_args(struct ili9341_device *dev_data, u8 cmd, u8 *args, size_t args_len);
int ili9341_send_data(struct ili9341_device *dev_data, u8 *buff, size_t len);
void fillScreen(struct ili9341_device *dev_data, int color);
int ili9341_send_one_data(struct ili9341_device *dev_data, unsigned char c);
void ili9341_hardware_reset(struct ili9341_device *dev_data);
int ili9341_send_one_command(struct ili9341_device *dev_data, u8 cmd);
void drawChar(struct ili9341_device *dev_data, char c, int x, int y, int color, int size, int bgcolor);
void drawRect(struct ili9341_device *dev_data, int x, int y, int w, int h, int color);
void drawFastVLine(struct ili9341_device *dev_data, int x, int y, int h, int color);
void drawRect(struct ili9341_device *dev_data, int x, int y, int w, int h, int color);
void drawFastVLine(struct ili9341_device *dev_data, int x, int y, int h, int color);
void drawFastHLine(struct ili9341_device *dev_data, int x, int y, int w, int color);
void drawLine(struct ili9341_device *dev_data, int x0, int y0, int x1, int y1, int color);
void drawText(struct ili9341_device *dev_data, const char *text, int x, int y, int color, int size, int bgcolor);
void ili9341_select(struct ili9341_device *dev_data);
void ili9341_unselect(struct ili9341_device *dev_data);


#define CHAR_WIDTH 6
#define CHAR_HEIGHT 8

static const unsigned char font[96][6] = {
	{0x00,0x00,0x00,0x00,0x00,0x00}, //  
	{0x5c,0x00,0x00,0x00,0x00,0x00}, // !
	{0x06,0x00,0x06,0x00,0x00,0x00}, // "
	{0x28,0x7c,0x28,0x7c,0x28,0x00}, // #
	{0x5c,0x54,0xfe,0x54,0x74,0x00}, // $
	{0x44,0x20,0x10,0x08,0x44,0x00}, // %
	{0x28,0x54,0x54,0x20,0x50,0x00}, // &
	{0x06,0x00,0x00,0x00,0x00,0x00}, // '
	{0x38,0x44,0x00,0x00,0x00,0x00}, // (
	{0x44,0x38,0x00,0x00,0x00,0x00}, // )
	{0x02,0x07,0x02,0x00,0x00,0x00}, // *
	{0x10,0x10,0x7c,0x10,0x10,0x00}, // +
	{0xc0,0x00,0x00,0x00,0x00,0x00}, // ,
	{0x10,0x10,0x10,0x10,0x10,0x00}, // -
	{0x40,0x00,0x00,0x00,0x00,0x00}, // .
	{0x60,0x10,0x0c,0x00,0x00,0x00}, // /
	{0x7c,0x64,0x54,0x4c,0x7c,0x00}, // 0
	{0x48,0x7c,0x40,0x00,0x00,0x00}, // 1
	{0x64,0x54,0x54,0x54,0x48,0x00}, // 2
	{0x44,0x54,0x54,0x54,0x6c,0x00}, // 3
	{0x3c,0x20,0x70,0x20,0x20,0x00}, // 4
	{0x5c,0x54,0x54,0x54,0x24,0x00}, // 5
	{0x7c,0x54,0x54,0x54,0x74,0x00}, // 6
	{0x04,0x04,0x64,0x14,0x0c,0x00}, // 7
	{0x7c,0x54,0x54,0x54,0x7c,0x00}, // 8
	{0x5c,0x54,0x54,0x54,0x7c,0x00}, // 9
	{0x44,0x00,0x00,0x00,0x00,0x00}, // :
	{0xc4,0x00,0x00,0x00,0x00,0x00}, // ;
	{0x10,0x28,0x44,0x00,0x00,0x00}, // <
	{0x28,0x28,0x28,0x28,0x28,0x00}, // =
	{0x44,0x28,0x10,0x00,0x00,0x00}, // >
	{0x08,0x04,0x54,0x08,0x00,0x00}, // ?
	{0x7c,0x44,0x54,0x54,0x5c,0x00}, // @
	{0x7c,0x24,0x24,0x24,0x7c,0x00}, // A
	{0x7c,0x54,0x54,0x54,0x6c,0x00}, // B
	{0x7c,0x44,0x44,0x44,0x44,0x00}, // C
	{0x7c,0x44,0x44,0x44,0x38,0x00}, // D
	{0x7c,0x54,0x54,0x54,0x44,0x00}, // E
	{0x7c,0x14,0x14,0x14,0x04,0x00}, // F
	{0x7c,0x44,0x44,0x54,0x74,0x00}, // G
	{0x7c,0x10,0x10,0x10,0x7c,0x00}, // H
	{0x44,0x44,0x7c,0x44,0x44,0x00}, // I
	{0x60,0x40,0x40,0x44,0x7c,0x00}, // J
	{0x7c,0x10,0x10,0x28,0x44,0x00}, // K
	{0x7c,0x40,0x40,0x40,0x40,0x00}, // L
	{0x7c,0x08,0x10,0x08,0x7c,0x00}, // M
	{0x7c,0x08,0x10,0x20,0x7c,0x00}, // N
	{0x38,0x44,0x44,0x44,0x38,0x00}, // O
	{0x7c,0x14,0x14,0x14,0x08,0x00}, // P
	{0x3c,0x24,0x64,0x24,0x3c,0x00}, // Q
	{0x7c,0x14,0x14,0x14,0x68,0x00}, // R
	{0x5c,0x54,0x54,0x54,0x74,0x00}, // S
	{0x04,0x04,0x7c,0x04,0x04,0x00}, // T
	{0x7c,0x40,0x40,0x40,0x7c,0x00}, // U
	{0x0c,0x30,0x40,0x30,0x0c,0x00}, // V
	{0x3c,0x40,0x30,0x40,0x3c,0x00}, // W
	{0x44,0x28,0x10,0x28,0x44,0x00}, // X
	{0x0c,0x10,0x60,0x10,0x0c,0x00}, // Y
	{0x44,0x64,0x54,0x4c,0x44,0x00}, // Z
	{0x7c,0x44,0x00,0x00,0x00,0x00}, // [
	{0x0c,0x10,0x60,0x00,0x00,0x00}, // "\"
	{0x44,0x7c,0x00,0x00,0x00,0x00}, // ]
	{0x00,0x01,0x00,0x01,0x00,0x00}, // ^
	{0x40,0x40,0x40,0x40,0x40,0x40}, // _
	{0x00,0x01,0x00,0x00,0x00,0x00}, // `
	{0x7c,0x24,0x24,0x24,0x7c,0x00}, // a
	{0x7c,0x54,0x54,0x54,0x6c,0x00}, // b
	{0x7c,0x44,0x44,0x44,0x44,0x00}, // c
	{0x7c,0x44,0x44,0x44,0x38,0x00}, // d
	{0x7c,0x54,0x54,0x54,0x44,0x00}, // e
	{0x7c,0x14,0x14,0x14,0x04,0x00}, // f
	{0x7c,0x44,0x44,0x54,0x74,0x00}, // g
	{0x7c,0x10,0x10,0x10,0x7c,0x00}, // h
	{0x44,0x44,0x7c,0x44,0x44,0x00}, // i
	{0x60,0x40,0x40,0x44,0x7c,0x00}, // j
	{0x7c,0x10,0x10,0x28,0x44,0x00}, // k
	{0x7c,0x40,0x40,0x40,0x40,0x00}, // l
	{0x7c,0x08,0x10,0x08,0x7c,0x00}, // m
	{0x7c,0x08,0x10,0x20,0x7c,0x00}, // n
	{0x38,0x44,0x44,0x44,0x38,0x00}, // o
	{0x7c,0x14,0x14,0x14,0x08,0x00}, // p
	{0x3c,0x24,0x64,0x24,0x3c,0x00}, // q
	{0x7c,0x14,0x14,0x14,0x68,0x00}, // r
	{0x5c,0x54,0x54,0x54,0x74,0x00}, // s
	{0x04,0x04,0x7c,0x04,0x04,0x00}, // t
	{0x7c,0x40,0x40,0x40,0x7c,0x00}, // u
	{0x0c,0x30,0x40,0x30,0x0c,0x00}, // v
	{0x3c,0x40,0x30,0x40,0x3c,0x00}, // w
	{0x44,0x28,0x10,0x28,0x44,0x00}, // x
	{0x0c,0x10,0x60,0x10,0x0c,0x00}, // y
	{0x44,0x64,0x54,0x4c,0x44,0x00}, // z
	{0x10,0x7c,0x44,0x00,0x00,0x00}, // {
	{0x6c,0x00,0x00,0x00,0x00,0x00}, // |
	{0x44,0x7c,0x10,0x00,0x00,0x00}, // }
	{0x02,0x01,0x02,0x01,0x00,0x00}, // ~
	{0x00,0x00,0x00,0x00,0x00,0x00}
};

#endif /* __ILI9341_LIB_H_ */